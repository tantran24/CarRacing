/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: Linnaeus (https://sketchfab.com/bordres)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/low-poly-tsukuba-circuit-d7a6d63a9f874355a680017e9e14d15a
Title: Low Poly Tsukuba Circuit
*/

import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { useConvexPolyhedron, useTrimesh, useBox, usePlane} from "@react-three/cannon";

export function Circuit(props) {
  const { nodes, materials } = useGLTF('../src/assets/3D/low_poly_tsukuba_circuit.glb')
  const list_Barriers = [...Array(28)].map((_, i) => 16 + 2 * i).concat([82, 90, 94, 96, 102, 126]);
  const list_plane = [78, 86, 92, 100, 122]

  const [ref] = usePlane(() => ({
    type: "Static", // Static type makes it immovable 
    rotation:  [-Math.PI / 2, 0, 0.1],
    position: [3.4, 0.01, 0]
  }));
  const [ref_1] = usePlane(() => ({
    type: "Static", // Static type makes it immovable 
    rotation:  [0, -Math.PI / 2, -Math.PI / 2 + 0.05],
    position: [2.6, 0.01, 0]
  }));
  const [ref_2] = usePlane(() => ({
    type: "Static", // Static type makes it immovable 
    arg: [1.5, 11.5],
    rotation:  [0, -Math.PI / 2, -Math.PI / 2 + 0.05],
    position: [2.6, 0.01, 0]
  }));

  return (
    <group {...props} dispose={null}>
      
      {list_Barriers.map((barrierIndex, i) => {
        const geometry = nodes[`Object_${barrierIndex}`].geometry;
        
        const vertices = geometry.attributes.position.array;
        const indices = geometry.index.array;
        var material_object = materials.BarriersTSU
        if (barrierIndex === 82) {
          console.log(geometry)
        }
        if (barrierIndex === 82 || barrierIndex === 96 || barrierIndex === 102 || barrierIndex === 126) {
          material_object = materials.BarriersCONC;
        } else if (barrierIndex === 90 || barrierIndex === 120) {
          material_object = materials.fence;
        } else if (barrierIndex === 94) {
          material_object = materials.outerbarrier;
        }
        const [ref] = useTrimesh(() => ({
          args: [vertices, indices],
          mass: 0, 
          type: 'Static'
        }));

        return (
          <mesh
            key={i}
            
            castShadow
            receiveShadow
            geometry={geometry}
            material={material_object} >
            </mesh>
          
        );
      })}
      
      {list_plane.map((planeIndex, i) => {
        const geometry = nodes[`Object_${planeIndex}`].geometry;
        const vertices = geometry.attributes.position.array;
        const indices = geometry.index.array;
        var material_object = materials.Asph
        if (planeIndex === 100 || planeIndex === 122) {
          material_object = materials.Asphalt;
        } else if (planeIndex === 78) {
          material_object = materials.ASPH2;
        }

        const [ref] = useTrimesh(() => ({
          args: [vertices, indices],
          mass: 0, 
          type: 'Static'
        }));
        return (
          <mesh
            key={i}
            castShadow
            receiveShadow
            geometry={geometry}
            material={material_object} >
              
            </mesh>
        );
      })}
      
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_4.geometry}
        material={materials.TSUKUB1}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_6.geometry}
        material={materials.TSUKUB1}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_8.geometry}
        material={materials.TSUKUB1}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_10.geometry}
        material={materials.TSUKUB1}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_12.geometry}
        material={materials.Warehouse_etc}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_14.geometry}
        material={materials.Warehouse_etc}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_72.geometry}
        material={materials.Material_677}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_74.geometry}
        material={materials.Material__94}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_76.geometry}
        material={materials.Material__32}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_80.geometry}
        material={materials.Grass}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_84.geometry}
        material={materials.Kerb}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_88.geometry}
        material={materials.Aqua}
      />
      
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_98.geometry}
        material={materials.Mountains}
      />

      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_104.geometry}
        material={materials.TSUKUB2}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_106.geometry}
        material={materials.Forest}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_108.geometry}
        material={materials.Asphalt}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_110.geometry}
        material={materials.Foilage}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_112.geometry}
        material={materials.Grass2}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_114.geometry}
        material={materials.Forest}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_116.geometry}
        material={materials.Forest}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_118.geometry}
        material={materials.Foilage}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_124.geometry}
        material={materials.BrownedGrass}
      />
      <mesh
        castShadow
        receiveShadow
        geometry={nodes.Object_128.geometry}
        material={materials.TSUKUB1}
      />
      <mesh rotation={[-Math.PI / 2, 0, 0]} position={[0,0,0]}>
              <planeGeometry args={[2, 13]} />
              <meshStandardMaterial color={'red'} opacity={0} transparent={true}/>
      </mesh>

      <mesh rotation={[-Math.PI / 2, -0.01, 0]} position={[2.2,0,4]}>
              <planeGeometry args={[1.5, 2]} />
              <meshStandardMaterial color={'blue'} opacity={0} transparent={true} />
      </mesh>
      <mesh rotation={[-Math.PI / 2, 0, -0.4]} position={[5,0,5]}>
              <planeGeometry args={[3, 20]} />
              <meshStandardMaterial color={'green'} opacity={0} transparent={true} />
      </mesh>

      <mesh rotation={[-Math.PI / 2 + 0.02, -0.01, -0.4]} position={[9.8 ,0.01,-4.43]}>
              <planeGeometry args={[1.2, 8]} />
        <meshStandardMaterial color={'orange'} transparent={true} opacity={0}/>
      </mesh>

      <mesh ref={ref} >
              <planeGeometry args={[1.2, 8]} />
              <meshStandardMaterial color={'purple'} transparent={true}  opacity={0} />
      </mesh>
      
    </group>
  )
}
useGLTF.preload('/low_poly_tsukuba_circuit.glb')